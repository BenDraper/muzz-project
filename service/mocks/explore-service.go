// Code generated by MockGen. DO NOT EDIT.
// Source: ../protos/explore-service_grpc.pb.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	protos "muzz-project/service/protos"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	grpc "google.golang.org/grpc"
)

// MockExploreServiceClient is a mock of ExploreServiceClient interface.
type MockExploreServiceClient struct {
	ctrl     *gomock.Controller
	recorder *MockExploreServiceClientMockRecorder
}

// MockExploreServiceClientMockRecorder is the mock recorder for MockExploreServiceClient.
type MockExploreServiceClientMockRecorder struct {
	mock *MockExploreServiceClient
}

// NewMockExploreServiceClient creates a new mock instance.
func NewMockExploreServiceClient(ctrl *gomock.Controller) *MockExploreServiceClient {
	mock := &MockExploreServiceClient{ctrl: ctrl}
	mock.recorder = &MockExploreServiceClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockExploreServiceClient) EXPECT() *MockExploreServiceClientMockRecorder {
	return m.recorder
}

// CountLikedYou mocks base method.
func (m *MockExploreServiceClient) CountLikedYou(ctx context.Context, in *protos.CountLikedYouRequest, opts ...grpc.CallOption) (*protos.CountLikedYouResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CountLikedYou", varargs...)
	ret0, _ := ret[0].(*protos.CountLikedYouResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CountLikedYou indicates an expected call of CountLikedYou.
func (mr *MockExploreServiceClientMockRecorder) CountLikedYou(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CountLikedYou", reflect.TypeOf((*MockExploreServiceClient)(nil).CountLikedYou), varargs...)
}

// ListLikedYou mocks base method.
func (m *MockExploreServiceClient) ListLikedYou(ctx context.Context, in *protos.ListLikedYouRequest, opts ...grpc.CallOption) (*protos.ListLikedYouResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListLikedYou", varargs...)
	ret0, _ := ret[0].(*protos.ListLikedYouResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListLikedYou indicates an expected call of ListLikedYou.
func (mr *MockExploreServiceClientMockRecorder) ListLikedYou(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListLikedYou", reflect.TypeOf((*MockExploreServiceClient)(nil).ListLikedYou), varargs...)
}

// ListNewLikedYou mocks base method.
func (m *MockExploreServiceClient) ListNewLikedYou(ctx context.Context, in *protos.ListLikedYouRequest, opts ...grpc.CallOption) (*protos.ListLikedYouResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListNewLikedYou", varargs...)
	ret0, _ := ret[0].(*protos.ListLikedYouResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListNewLikedYou indicates an expected call of ListNewLikedYou.
func (mr *MockExploreServiceClientMockRecorder) ListNewLikedYou(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListNewLikedYou", reflect.TypeOf((*MockExploreServiceClient)(nil).ListNewLikedYou), varargs...)
}

// PutDecision mocks base method.
func (m *MockExploreServiceClient) PutDecision(ctx context.Context, in *protos.PutDecisionRequest, opts ...grpc.CallOption) (*protos.PutDecisionResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PutDecision", varargs...)
	ret0, _ := ret[0].(*protos.PutDecisionResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PutDecision indicates an expected call of PutDecision.
func (mr *MockExploreServiceClientMockRecorder) PutDecision(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PutDecision", reflect.TypeOf((*MockExploreServiceClient)(nil).PutDecision), varargs...)
}

// MockExploreServiceServer is a mock of ExploreServiceServer interface.
type MockExploreServiceServer struct {
	ctrl     *gomock.Controller
	recorder *MockExploreServiceServerMockRecorder
}

// MockExploreServiceServerMockRecorder is the mock recorder for MockExploreServiceServer.
type MockExploreServiceServerMockRecorder struct {
	mock *MockExploreServiceServer
}

// NewMockExploreServiceServer creates a new mock instance.
func NewMockExploreServiceServer(ctrl *gomock.Controller) *MockExploreServiceServer {
	mock := &MockExploreServiceServer{ctrl: ctrl}
	mock.recorder = &MockExploreServiceServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockExploreServiceServer) EXPECT() *MockExploreServiceServerMockRecorder {
	return m.recorder
}

// CountLikedYou mocks base method.
func (m *MockExploreServiceServer) CountLikedYou(arg0 context.Context, arg1 *protos.CountLikedYouRequest) (*protos.CountLikedYouResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CountLikedYou", arg0, arg1)
	ret0, _ := ret[0].(*protos.CountLikedYouResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CountLikedYou indicates an expected call of CountLikedYou.
func (mr *MockExploreServiceServerMockRecorder) CountLikedYou(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CountLikedYou", reflect.TypeOf((*MockExploreServiceServer)(nil).CountLikedYou), arg0, arg1)
}

// ListLikedYou mocks base method.
func (m *MockExploreServiceServer) ListLikedYou(arg0 context.Context, arg1 *protos.ListLikedYouRequest) (*protos.ListLikedYouResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListLikedYou", arg0, arg1)
	ret0, _ := ret[0].(*protos.ListLikedYouResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListLikedYou indicates an expected call of ListLikedYou.
func (mr *MockExploreServiceServerMockRecorder) ListLikedYou(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListLikedYou", reflect.TypeOf((*MockExploreServiceServer)(nil).ListLikedYou), arg0, arg1)
}

// ListNewLikedYou mocks base method.
func (m *MockExploreServiceServer) ListNewLikedYou(arg0 context.Context, arg1 *protos.ListLikedYouRequest) (*protos.ListLikedYouResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListNewLikedYou", arg0, arg1)
	ret0, _ := ret[0].(*protos.ListLikedYouResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListNewLikedYou indicates an expected call of ListNewLikedYou.
func (mr *MockExploreServiceServerMockRecorder) ListNewLikedYou(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListNewLikedYou", reflect.TypeOf((*MockExploreServiceServer)(nil).ListNewLikedYou), arg0, arg1)
}

// PutDecision mocks base method.
func (m *MockExploreServiceServer) PutDecision(arg0 context.Context, arg1 *protos.PutDecisionRequest) (*protos.PutDecisionResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PutDecision", arg0, arg1)
	ret0, _ := ret[0].(*protos.PutDecisionResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PutDecision indicates an expected call of PutDecision.
func (mr *MockExploreServiceServerMockRecorder) PutDecision(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PutDecision", reflect.TypeOf((*MockExploreServiceServer)(nil).PutDecision), arg0, arg1)
}

// MockUnsafeExploreServiceServer is a mock of UnsafeExploreServiceServer interface.
type MockUnsafeExploreServiceServer struct {
	ctrl     *gomock.Controller
	recorder *MockUnsafeExploreServiceServerMockRecorder
}

// MockUnsafeExploreServiceServerMockRecorder is the mock recorder for MockUnsafeExploreServiceServer.
type MockUnsafeExploreServiceServerMockRecorder struct {
	mock *MockUnsafeExploreServiceServer
}

// NewMockUnsafeExploreServiceServer creates a new mock instance.
func NewMockUnsafeExploreServiceServer(ctrl *gomock.Controller) *MockUnsafeExploreServiceServer {
	mock := &MockUnsafeExploreServiceServer{ctrl: ctrl}
	mock.recorder = &MockUnsafeExploreServiceServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUnsafeExploreServiceServer) EXPECT() *MockUnsafeExploreServiceServerMockRecorder {
	return m.recorder
}

// mustEmbedUnimplementedExploreServiceServer mocks base method.
func (m *MockUnsafeExploreServiceServer) mustEmbedUnimplementedExploreServiceServer() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "mustEmbedUnimplementedExploreServiceServer")
}

// mustEmbedUnimplementedExploreServiceServer indicates an expected call of mustEmbedUnimplementedExploreServiceServer.
func (mr *MockUnsafeExploreServiceServerMockRecorder) mustEmbedUnimplementedExploreServiceServer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "mustEmbedUnimplementedExploreServiceServer", reflect.TypeOf((*MockUnsafeExploreServiceServer)(nil).mustEmbedUnimplementedExploreServiceServer))
}
